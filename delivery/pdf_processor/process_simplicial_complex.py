# process_simplicial_complex.py
# -*- coding: utf-8 -*-
# @Author: Wei-Chung Huang
# @Date:   2017-05-18 10:30:23
# @Last Modified by:   Wei-Chung Huang
# @Last Modified time: 2017-05-18 10:39:27

"""
Processes Simplicial Complex with the dat file from /output_s_dats which generated by input_pdfs
"""

# pystdlib imports~
from json import loads

# chardet ~
from chardet import detect

# subprocess
import subprocess
from os import path


if __name__ == '__main__':
  print("""
    ------------------------------------------------------
    ------------------ SIMPLICIAL COMPLEX PROCESSOR ------------------
    ------------------------------------------------------
    """)
  print("Detecting encoding of the files word_map.json and doc_map.json:")
  with open("word_map.json", "rb") as wordmap_f:
    s = wordmap_f.read()
    chardet_detected_encoding = detect(s)['encoding']
    print(
        'Character Encoding detected for word_map.json = ',
        chardet_detected_encoding)
    num_word_map = loads(str(s, encoding=chardet_detected_encoding))

  with open("doc_map.json", "rb") as docmap_f:
    s = docmap_f.read()
    chardet_detected_encoding = detect(s)['encoding']
    print(
        'Character Encoding detected for doc_map.json = ',
        chardet_detected_encoding)
    docs_map = loads(str(s, encoding=chardet_detected_encoding))

  num_cols = len(num_word_map)
  num_rows = len(docs_map)
  
  num_rules = int(input("Enter number of rules: "))
  threshold = float(input("Enter threashold: "))
  s_output_dat_path = path.abspath("output_s_dats/sorted_s_output.dat")
  output_path = "outputs/result.txt"
  process_exe = "./simplicial_complex/cpp/go"
  if (not path.exists(process_exe)):
    print("Building Simplicial Complex...")
    subprocess.call("./simplicial_complex/cpp/build.sh")

  process_cmd = "./simplicial_complex/cpp/go" + " " + str(num_rules) + " " + \
                str(threshold) + " " + str(num_cols) + " " + str(num_rows) + " " + \
                s_output_dat_path + " " + output_path

  return_code = subprocess.call(process_cmd, shell=True) 

  exit(0)
